#!/usr/bin/env bpftrace

BEGIN
{
	printf("Rootkit detecting...... Hit Ctrl-C to end.\n");
    printf("%-10s %-24s %-6s %s\n",
        "TIME","EVENT","PID","describe");
    @preload = "/etc/ld.so.preload";
    @pre_flag = 0;
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat
{
    @open_filename[pid] = args->filename;
    // @openat_mode[pid] = args->mode;
    // printf("%-16s sys_enter_openat (%s )  =   \n", comm,str(args->filename));
}

tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/@open_filename[pid]/
{
    $timenum = nsecs-@start;
    if(@preload == str(@open_filename[pid]) ){
        // @count = @count+1;
        if (@pre_flag==0)
        {
            @pre_flag = 1;
            @start = nsecs;
            // printf("start %ld ns\n",@start);
        }
        if (@pre_flag==1 && $timenum>10000000000)// 10s 一次
        {   
            // printf("timenum %ld ns\n",$timenum);
            @pre_flag=0;
            time("%H:%M:%S ");
            printf("%-24s %-6d  You may have been dynamically injected",
                "[Rootkit-user]", pid);
            printf(", please check %s, check *.so files\n", str(@open_filename[pid]));
            // printf("[+] You may have been dynamically injected !!! \n");
            // printf("[+] please check these *.so files  by yourself !!! \n");
            // printf("[!]  %s \n",str(@open_filename[pid]));
            // printf("==================================================\n");
        }
    }
}

kretprobe:do_init_module
{
    $sys_call_table = kaddr("sys_call_table");
    $text_start = kaddr("_stext");
    $text_end = kaddr("_etext");
    // printf("+++++++++++ kernel text_range : %p  ~ %p ++++++++++++++++ \n",$text_start,$text_end); describe
    $i = 0; 
    while ($i <= 335) { 
        $addr = (uint64)*(((uint64)$sys_call_table)+(uint64)$i*8);
        if((uint64)$addr<(uint64)$text_start || (uint64)$addr>(uint64)$text_end){     // check in kernel text boundary
            time("%H:%M:%S ");
            printf("%-24s %-6d  sys_call_table[%d] be hooked and point at %s\n",
                "[Rootkit-kernel]",pid, $i, ksym((uint64)$addr));
        }
        $i++}
    // exit();
}

END
{
    clear(@open_filename);
    clear(@preload);
    clear(@pre_flag);
    clear(@start);
}
