#!/usr/bin/env bpftrace
/* Tracing execve and execveat with container pidns and uts name. */

#include <linux/sched.h>
#include <linux/nsproxy.h>
#include <linux/utsname.h>
#include <linux/pid_namespace.h>

BEGIN {
  @hosttask = (struct task_struct *)curtask;
  @hostpidns = @hosttask->nsproxy->pid_ns_for_children->ns.inum;
  //$hostcname = @hosttask->nsproxy->uts_ns->name.nodename;  
  //printf("%-12ld\n", (uint64)@hostpidns); 
  //printf("%-12s %-8s %-6s %-6s %-8s %s\n", "PIDNS", "CONTAINER", "PPID", "PID", "COMM", "ARGS");
  printf("begin to trace files opened in container\n");
}

tracepoint:syscalls:sys_enter_open,
tracepoint:syscalls:sys_enter_openat
{
	@filename[tid] = args->filename;
}
tracepoint:syscalls:sys_exit_open,
tracepoint:syscalls:sys_exit_openat
/@filename[tid]/
{
	$ret = args->ret;
	$fd = $ret > 0 ? $ret : -1;
	$errno = $ret > 0 ? 0 : - $ret;
	$task = (struct task_struct *)curtask;
    $pidns = $task->nsproxy->pid_ns_for_children->ns.inum;
    $cname = $task->nsproxy->uts_ns->name.nodename;
    if(@hostpidns != $pidns && $fd != -1)
    {
        system("./hash1.1 %s %d",str(@filename[tid]),pid);
        //printf("%-12ld open %-6d %-16s %4d %3d %s\n",(uint64)$pidns, pid, comm, $fd, $errno,str(@filename[tid]));
    }

	delete(@filename[tid]);
}

